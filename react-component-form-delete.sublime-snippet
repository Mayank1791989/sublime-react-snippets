<snippet>
  <content><![CDATA[
import Relay from 'react-relay';
import React, {Component, PropTypes} from 'react';

import SpinnerButton from 'components/ui/Button/SpinnerButton';
import FormServerErrors from 'components/ui/Form/FormServerErrors';
import { injectToast } from 'components/ui/Toast';

import _isEmpty from 'lodash/lang/isEmpty';
import parseErrors from 'utils/parseErrors';

import ${1}DeleteMutation from 'mutations/${1}DeleteMutation';

@injectToast
class ${1:Name}DeleteForm extends Component {
  static propTypes = {
    onDone: PropTypes.func,
    toast: PropTypes.object.isRequired,

    relay: PropTypes.object.isRequired,
    ${2}: PropTypes.object.isRequired,
    ${1/(.)/\L$1/}: PropTypes.object.isRequired,
  };

  state = {
    submitting: false,
    serverErrors: [],
  };

  _handleSubmit = (event) => {
    event.preventDefault();
    this.setState({submitting: true, serverErrors: []});
    const mutationProps = {
      ${1/(.)/\L$1/}: this.props.${1/(.)/\L$1/},
      ${2}: this.props.${2},
    };
    Relay.Store.update(new ${1}DeleteMutation(mutationProps), {
      onSuccess: () => {
        this.setState({submitting: false});
        this.props.toast.showMessage('Removed ${1}');
        if (this.props.onDone) {
          this.props.onDone();
        }
      },
      onFailure: (transaction) => {
        parseErrors(transaction).then((errors) => {
          this.setState({submitting: false, serverErrors: errors});
        });
      },
    });
  };

  render() {
    const { state } = this;
    return (
      <div>
        <h2>Remove </h2>
        <form onSubmit={this._handleSubmit}>
          {!state.submitting && !_isEmpty(state.serverErrors)
            ? <FormServerErrors errors={state.serverErrors} />
            : null
          }

          <p>
            Are you sure you want to delete?
          </p>

          <SpinnerButton
            className="prime"
            type="submit"
            showSpinner={this.state.submitting}
          >
            Yes, Delete
          </SpinnerButton>
        </form>
      </div>
    );
  }
}

export default Relay.createContainer(${1}DeleteForm, {
  fragments: {
    ${2:viewer}: () => Relay.QL`
      fragment on ${2/(.)/\u$1/} {
        id
        \${${1}DeleteMutation.getFragment('${2}')}
      }
    `,
    ${1/(.)/\L$1/}: () => Relay.QL`
      fragment on ${1} {
        \${${1}DeleteMutation.getFragment('${1/(.)/\L$1/}')}
      }
    `,
  },
});
]]></content>
  <tabTrigger>form_delete</tabTrigger>
  <scope>source.js -(meta)</scope>
  <description>React Component: New Update Form</description>
</snippet>
