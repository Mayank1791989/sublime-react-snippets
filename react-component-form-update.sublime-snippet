<snippet>
  <content><![CDATA[
import Relay from 'react-relay';
import React, {Component, PropTypes} from 'react';

import Input from 'components/ui/Input';
import SpinnerButton from 'components/ui/Button/SpinnerButton';
import { injectToast } from 'components/ui/Toast';

import FormField from 'components/ui/Form/FormField';
import FormServerErrors from 'components/ui/Form/FormServerErrors';

import _isEmpty from 'lodash/lang/isEmpty';
import _memoize from 'lodash/function/memoize';
import parseErrors from 'utils/parseErrors';
import diff from 'utils/diff';
import plValidation from 'utils/plValidation';
import update from 'react-addons-update';

import ${1}UpdateMutation from 'mutations/${1}UpdateMutation';

@injectToast
@plValidation
class ${1:Name}UpdateForm extends Component {
  static propTypes = {
    validate: PropTypes.func.isRequired,
    handleValidation: PropTypes.func.isRequired,
    getValidationMessages: PropTypes.func.isRequired,

    onDone: PropTypes.func,
    toast: PropTypes.object.isRequired,

    ${1/(.)/\L$1/}: PropTypes.object.isRequired,
  };

  state = {
    submitting: false,
    serverErrors: [],
    value: this._initialValue(),
  };

  getValidatorData = () => {
    return this.state.value;
  };

  validatorTypes() {
    return '${1}UpdateArgs';
  }

  _initialValue() {
    return this.props.${1/(.)/\L$1/};
  }

  _done() {
    this.setState({submitting: false});
    this.props.toast.showMessage('${1} updated');
    if (this.props.onDone) {
      this.props.onDone();
    }
  }

  _handleChange = _memoize((key) => {
    return (value) => {
      this.setState(update(this.state, {
        value: { [key]: { \$set: value }},
      }), () => {
        this.props.validate(key);
      });
    };
  });

  _handleSubmit = (event) => {
    event.preventDefault();
    this.setState({submitting: true, serverErrors: []});

    const patch = diff(this._initialValue(), this.state.value);
    if (!patch) {
      this._done();
      return;
    }

    const onValidate = (error) => {
      if (error) { this.setState({submitting: false}); }
      const mutationProps = {
        ${1/(.)/\L$1/}: this.props.${1/(.)/\L$1/},
        patch: patch,
      };
      Relay.Store.commitUpdate(new ${1}UpdateMutation(mutationProps), {
        onSuccess: () => { this._done(); },
        onFailure: (transaction) => {
          parseErrors(transaction).then((errors) => {
            this.setState({submitting: false, serverErrors: errors});
          });
        },
      });
    };

    this.props.validate(onValidate);
  };

  render() {
    const { state } = this;
    return (
      <div>
        <h2>Update ${1}</h2>

        <form onSubmit={this._handleSubmit}>

          {!state.submitting && !_isEmpty(state.serverErrors)
            ? <FormServerErrors errors={state.serverErrors} />
            : null
          }

          ${2}

          <SpinnerButton
            className="prime block"
            type="submit"
            showSpinner={this.state.submitting}
          >
            Submit
          </SpinnerButton>
        </form>
      </div>
    );
  }
}

export default Relay.createContainer(${1}UpdateForm, {
  fragments: {
    ${1/(.)/\L$1/}: () => Relay.QL`
      fragment on ${1} {
        \${${1}UpdateMutation.getFragment('${1/(.)/\L$1/}')}
      }
    `,
  },
});

]]></content>
  <tabTrigger>form_update</tabTrigger>
  <scope>source.js -(meta)</scope>
  <description>React Component: New Update Form</description>
</snippet>
