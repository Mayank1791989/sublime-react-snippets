<snippet>
  <content><![CDATA[
import plValidation from 'utils/plValidation';
import ${2:Mutation}Mutation from '../mutations/${2:Mutation}Mutation';

@plValidation
class ${1:Name}Form extends Component {
  static propTypes = {
    errors: PropTypes.object,
    validate: PropTypes.func,
    isValid: PropTypes.func,
    handleValidation: PropTypes.func,
    getValidationMessages: PropTypes.func,
    clearValidations: PropTypes.func,
  };

  state = {
    activeMutation: false,
  };

  getValidatorData = () => {
    return {};
  };

  _handleSubmit = (event) => {
    event.preventDefault();
    this.setState({activeMutation: true});
    const onValidate = (error) => {
      if (error) {
        // @TODO handle error from server
        console.log(error);
        this.setState({activeMutation: false});
      } else {
        const mutationProps = { input: this.getValidatorData() };
        Relay.Store.update(new ${2:Mutation}Mutation(mutationProps), {
          onSuccess: () => {
            this.setState({acti: false});
            console.log('mutation Success', arguments);
          },
          onFailure: (transaction) => {
            this.setState({activeMutation: false});
            console.log('mutation failed', transaction);
          },
        });
      }
    };
    this.props.validate(onValidate);
  };

  // fetch by introspection
  validatorTypes = () => {
    return '${2:Mutation}Input';
  };

  render() {
    return (
      <form onSubmit={this._handleSubmit}>
        <SpinnerButton
          className="prime block"
          type="submit"
          showSpinner={this.state.activeMutation}
          spinnerText="Please Wait..."
        >
          Submit
        </SpinnerButton>
      </form>
    );
  }
}
]]></content>
  <tabTrigger>React_Form_Component</tabTrigger>
  <scope>source.js -(meta)</scope>
  <description>React Component: Form</description>
</snippet>
