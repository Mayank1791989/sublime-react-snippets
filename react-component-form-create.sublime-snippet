<snippet>
  <content><![CDATA[
/* @flow */
import React, { Component } from 'react';
import Relay from 'react-relay';

import { SpinnerButton } from 'components/ui/Button';
import { FormattedMessage } from 'react-intl';
import Input from 'components/ui/Input';

import {
  FormTitle,
  FormField,
  FormServerErrors,
} from 'components/ui/Form';

import ${1:Name}CreateMutation from 'mutations/${1:Name}CreateMutation';

import plValidation from 'utils/plValidation';
import update from 'react-addons-update';
import memoize from 'utils/memoize';
import parseErrors from 'utils/parseErrors';
import _isEmpty from 'lodash/lang/isEmpty';
import invariant from 'fbjs/lib/invariant';

@plValidation
export class _${1:Name}CreateForm extends Component {
  static propTypes = {
    viewer: React.PropTypes.shape({}).isRequired,
    onDone: React.PropTypes.func.isRequired,

    getValidationMessages: React.PropTypes.func.isRequired,
    validate: React.PropTypes.func.isRequired,
  };

  static contextTypes = {
    intl: React.PropTypes.shape({
      formatMessage: React.PropTypes.func.isRequired,
    }),
    toast: React.PropTypes.shape({
      showMessage: React.PropTypes.func.isRequired,
    }),
  };

  _initialValue = { // eslint-disable-line react/sort-comp
    name: '',
    ${2}
  };

  state = {
    value: this._initialValue,
    serverErrors: [],
    submitting: false,
  };

  getValidatorData() {
    return this.state.value;
  }

  validatorTypes() {
    return '${1:Name}Input';
  }

  _handleChange = memoize((key) => {
    return (value) => {
      this.setState(update(this.state, {
        value: { [key]: { \$set: value }},
      }), () => {
        this.props.validate(key);
      });
    };
  });

  _handleSubmit = (event) => {
    event.preventDefault();
    this.setState({submitting: true, serverErrors: []});
    const onValidate = (error) => {
      if (error) {
        this.setState({submitting: false});
      } else {
        const mutationProps = {
          input: this.getValidatorData(),
          viewer: this.props.viewer,
        };
        Relay.Store.commitUpdate(new ${1:Name}CreateMutation(mutationProps), {
          onSuccess: ({${1:Name}}) => {
            invariant(${1:Name}, 'required argument missing');
            invariant(${1:Name}.${1/(.)/\L$1/}Edge, 'required new ${1/(.)/\L$1/}Edge missing in response');
            this.setState({submitting: false});
            this.context.toast.showMessage(this._text.successToastText);
            this.props.onDone({id: ${1:Name}.${1/(.)/\L$1/}Edge.node.id});
          },
          onFailure: (transaction) => {
            parseErrors(transaction).then((errors) => {
              this.setState({submitting: false, serverErrors: errors});
            });
          },
        });
      }
    };
    this.props.validate(onValidate);
  };

  _text = {
    title: <FormattedMessage id="${1:Name}.createForm.title" defaultMessage="Add New Config" />,

    nameField: {
      label: <FormattedMessage id="${1:Name}.createForm.nameField.label" defaultMessage="Name" />,
      placeholder: this.context.intl.formatMessage({
        id: '${1:Name}.createForm.nameField.placeholder',
        defaultMessage: 'Name',
      }),
    },

    submitBtnText: <FormattedMessage id="${1:Name}.createForm.submitBtnText" defaultMessage="Create" />,

    successToastText: this.context.intl.formatMessage({
      id: '${1:Name}.createForm.successToast',
      defaultMessage: '${1:Name} Added',
    }),
  };

  render() {
    return (
      <form onSubmit={this._handleSubmit}>

        <FormTitle>{this._text.title}</FormTitle>

        {!this.state.submitting && !_isEmpty(this.state.serverErrors)
          ? <FormServerErrors errors={this.state.serverErrors} />
          : null
        }

        <FormField>
          <FormField.Label>{this._text.nameField.label}</FormField.Label>
           <Input
            type="text"
            placeholder={this._text.nameField.placeholder}
            value={this.state.value.name}
            onChange={this._handleChange('name')}
          />
          <FormField.Errors errors={this.props.getValidationMessages('name')} />
        </FormField>

        <SpinnerButton
          className="prime block"
          type="submit"
          showSpinner={this.state.submitting}
        >
          {this._text.submitBtnText}
        </SpinnerButton>

      </form>
    );
  }
}

const _${1:Name}CreateFormContainer = Relay.createContainer(_${1:Name}CreateForm, {
  fragments: {
    viewer: () => Relay.QL`
      fragment on Player {
        \${${1:Name}Mutation.getFragment('viewer')}
      }
    `,
  },
});

export { _${1:Name}CreateFormContainer };

import { createRelayRootContainerComponent } from 'components/Relay';
export default createRelayRootContainerComponent(_${1:Name}CreateFormContainer, {
  queries: {
    viewer: () => Relay.QL`
      query Viewer_${1:Name}Create { viewer }
    `,
  },
});
]]></content>
  <tabTrigger>form_create</tabTrigger>
  <scope>source.js -(meta)</scope>
  <description>React Component: Create Form</description>
</snippet>
